//
// SessionManagementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class SessionManagementAPI {
    /**
     Disable Cancel On Disconnect for the connection. This does not change the default account setting.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateDisableCancelOnDisconnectGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateDisableCancelOnDisconnectGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Disable Cancel On Disconnect for the connection. This does not change the default account setting.
     - GET /private/disable_cancel_on_disconnect
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateDisableCancelOnDisconnectGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/disable_cancel_on_disconnect"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable Cancel On Disconnect for the connection. This does not change the default account setting.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateEnableCancelOnDisconnectGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateEnableCancelOnDisconnectGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable Cancel On Disconnect for the connection. This does not change the default account setting.
     - GET /private/enable_cancel_on_disconnect
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateEnableCancelOnDisconnectGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/enable_cancel_on_disconnect"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stop sending heartbeat messages.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicDisableHeartbeatGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicDisableHeartbeatGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Stop sending heartbeat messages.
     - GET /public/disable_heartbeat
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicDisableHeartbeatGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/disable_heartbeat"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections. When heartbeats have been set up, the API server will send `heartbeat` messages and `test_request` messages. Your software should respond to `test_request` messages by sending a `/api/v2/public/test` request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.
     
     - parameter interval: (query) The heartbeat interval in seconds, but not less than 10 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicSetHeartbeatGet(interval: Double, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicSetHeartbeatGetWithRequestBuilder(interval: interval).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections. When heartbeats have been set up, the API server will send `heartbeat` messages and `test_request` messages. Your software should respond to `test_request` messages by sending a `/api/v2/public/test` request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.
     - GET /public/set_heartbeat
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter interval: (query) The heartbeat interval in seconds, but not less than 10 
     - returns: RequestBuilder<Any> 
     */
    open class func publicSetHeartbeatGetWithRequestBuilder(interval: Double) -> RequestBuilder<Any> {
        let path = "/public/set_heartbeat"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "interval": interval
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
