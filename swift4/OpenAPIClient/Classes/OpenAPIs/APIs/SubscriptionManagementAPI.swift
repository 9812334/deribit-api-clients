//
// SubscriptionManagementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class SubscriptionManagementAPI {
    /**
     Subscribe to one or more channels.
     
     - parameter channels: (query) A list of channels to subscribe to. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSubscribeGet(channels: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSubscribeGetWithRequestBuilder(channels: channels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Subscribe to one or more channels.
     - GET /private/subscribe
     - Subscribe to one or more channels.  The name of the channel determines what information will be provided, and in what form. 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter channels: (query) A list of channels to subscribe to. 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSubscribeGetWithRequestBuilder(channels: [String]) -> RequestBuilder<Any> {
        let path = "/private/subscribe"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channels": channels
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unsubscribe from one or more channels.
     
     - parameter channels: (query) A list of channels to unsubscribe from. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateUnsubscribeGet(channels: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateUnsubscribeGetWithRequestBuilder(channels: channels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Unsubscribe from one or more channels.
     - GET /private/unsubscribe
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter channels: (query) A list of channels to unsubscribe from. 
     - returns: RequestBuilder<Any> 
     */
    open class func privateUnsubscribeGetWithRequestBuilder(channels: [String]) -> RequestBuilder<Any> {
        let path = "/private/unsubscribe"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channels": channels
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Subscribe to one or more channels.
     
     - parameter channels: (query) A list of channels to subscribe to. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicSubscribeGet(channels: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicSubscribeGetWithRequestBuilder(channels: channels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Subscribe to one or more channels.
     - GET /public/subscribe
     - Subscribe to one or more channels.  This is the same method as [/private/subscribe](#private_subscribe), but it can only be used for 'public' channels. 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter channels: (query) A list of channels to subscribe to. 
     - returns: RequestBuilder<Any> 
     */
    open class func publicSubscribeGetWithRequestBuilder(channels: [String]) -> RequestBuilder<Any> {
        let path = "/public/subscribe"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channels": channels
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unsubscribe from one or more channels.
     
     - parameter channels: (query) A list of channels to unsubscribe from. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicUnsubscribeGet(channels: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicUnsubscribeGetWithRequestBuilder(channels: channels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Unsubscribe from one or more channels.
     - GET /public/unsubscribe
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter channels: (query) A list of channels to unsubscribe from. 
     - returns: RequestBuilder<Any> 
     */
    open class func publicUnsubscribeGetWithRequestBuilder(channels: [String]) -> RequestBuilder<Any> {
        let path = "/public/unsubscribe"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channels": channels
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
