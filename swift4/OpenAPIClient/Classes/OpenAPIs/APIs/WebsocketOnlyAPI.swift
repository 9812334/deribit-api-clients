//
// WebsocketOnlyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class WebsocketOnlyAPI {
    /**
     Disable Cancel On Disconnect for the connection. This does not change the default account setting.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateDisableCancelOnDisconnectGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateDisableCancelOnDisconnectGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Disable Cancel On Disconnect for the connection. This does not change the default account setting.
     - GET /private/disable_cancel_on_disconnect
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateDisableCancelOnDisconnectGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/disable_cancel_on_disconnect"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable Cancel On Disconnect for the connection. This does not change the default account setting.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateEnableCancelOnDisconnectGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateEnableCancelOnDisconnectGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable Cancel On Disconnect for the connection. This does not change the default account setting.
     - GET /private/enable_cancel_on_disconnect
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func privateEnableCancelOnDisconnectGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/private/enable_cancel_on_disconnect"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gracefully close websocket connection, when COD (Cancel On Disconnect) is enabled orders are not cancelled
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateLogoutGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        privateLogoutGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Gracefully close websocket connection, when COD (Cancel On Disconnect) is enabled orders are not cancelled
     - GET /private/logout
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func privateLogoutGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/private/logout"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Subscribe to one or more channels.
     
     - parameter channels: (query) A list of channels to subscribe to. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateSubscribeGet(channels: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateSubscribeGetWithRequestBuilder(channels: channels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Subscribe to one or more channels.
     - GET /private/subscribe
     - Subscribe to one or more channels.  The name of the channel determines what information will be provided, and in what form. 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter channels: (query) A list of channels to subscribe to. 
     - returns: RequestBuilder<Any> 
     */
    open class func privateSubscribeGetWithRequestBuilder(channels: [String]) -> RequestBuilder<Any> {
        let path = "/private/subscribe"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channels": channels
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unsubscribe from one or more channels.
     
     - parameter channels: (query) A list of channels to unsubscribe from. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func privateUnsubscribeGet(channels: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        privateUnsubscribeGetWithRequestBuilder(channels: channels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Unsubscribe from one or more channels.
     - GET /private/unsubscribe
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter channels: (query) A list of channels to unsubscribe from. 
     - returns: RequestBuilder<Any> 
     */
    open class func privateUnsubscribeGetWithRequestBuilder(channels: [String]) -> RequestBuilder<Any> {
        let path = "/private/unsubscribe"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channels": channels
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stop sending heartbeat messages.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicDisableHeartbeatGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicDisableHeartbeatGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Stop sending heartbeat messages.
     - GET /public/disable_heartbeat
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Any> 
     */
    open class func publicDisableHeartbeatGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/public/disable_heartbeat"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.
     
     - parameter clientName: (query) Client software name 
     - parameter clientVersion: (query) Client software version 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicHelloGet(clientName: String, clientVersion: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicHelloGetWithRequestBuilder(clientName: clientName, clientVersion: clientVersion).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.
     - GET /public/hello
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter clientName: (query) Client software name 
     - parameter clientVersion: (query) Client software version 
     - returns: RequestBuilder<Any> 
     */
    open class func publicHelloGetWithRequestBuilder(clientName: String, clientVersion: String) -> RequestBuilder<Any> {
        let path = "/public/hello"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_name": clientName, 
            "client_version": clientVersion
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections. When heartbeats have been set up, the API server will send `heartbeat` messages and `test_request` messages. Your software should respond to `test_request` messages by sending a `/api/v2/public/test` request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.
     
     - parameter interval: (query) The heartbeat interval in seconds, but not less than 10 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicSetHeartbeatGet(interval: Double, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicSetHeartbeatGetWithRequestBuilder(interval: interval).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections. When heartbeats have been set up, the API server will send `heartbeat` messages and `test_request` messages. Your software should respond to `test_request` messages by sending a `/api/v2/public/test` request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.
     - GET /public/set_heartbeat
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter interval: (query) The heartbeat interval in seconds, but not less than 10 
     - returns: RequestBuilder<Any> 
     */
    open class func publicSetHeartbeatGetWithRequestBuilder(interval: Double) -> RequestBuilder<Any> {
        let path = "/public/set_heartbeat"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "interval": interval
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Subscribe to one or more channels.
     
     - parameter channels: (query) A list of channels to subscribe to. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicSubscribeGet(channels: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicSubscribeGetWithRequestBuilder(channels: channels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Subscribe to one or more channels.
     - GET /public/subscribe
     - Subscribe to one or more channels.  This is the same method as [/private/subscribe](#private_subscribe), but it can only be used for 'public' channels. 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter channels: (query) A list of channels to subscribe to. 
     - returns: RequestBuilder<Any> 
     */
    open class func publicSubscribeGetWithRequestBuilder(channels: [String]) -> RequestBuilder<Any> {
        let path = "/public/subscribe"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channels": channels
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unsubscribe from one or more channels.
     
     - parameter channels: (query) A list of channels to unsubscribe from. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicUnsubscribeGet(channels: [String], completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publicUnsubscribeGetWithRequestBuilder(channels: channels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Unsubscribe from one or more channels.
     - GET /public/unsubscribe
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter channels: (query) A list of channels to unsubscribe from. 
     - returns: RequestBuilder<Any> 
     */
    open class func publicUnsubscribeGetWithRequestBuilder(channels: [String]) -> RequestBuilder<Any> {
        let path = "/public/unsubscribe"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channels": channels
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
